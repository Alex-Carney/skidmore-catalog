// The schema.prisma defines the way our data is modeled. The exact function of this file is to provide the instructions to the
// 'prisma migrate' command, which will automatically convert all the information in here to SQL and build our database in the way
// we define it here. This means we only need to work with the prisma 'model', instead of raw SQL in postgres. We can completely
// abstract the database out of this app, and only work with prisma as the Object Relational Mapper.
// DON'T ever modify the 'datasource' or 'generator' tags. If you want to update the tables in the database, change the models.
// Any time you change the schema.prisma, you must MIGRATE those changes over to postgres. This requires the following chain of commands:
// (also note that postgres must be running in its docker container for this to work, otherwise the database won't accept any connections)
// If the database is not running in the docker container, use:
// -docker-compose -f docker-compose.db.yml up -d OR npm run docker:db

// COMMAND CHAIN:
// -npx prisma migrate dev _OR_ npm run migrate:dev (applies the new schema to postgres, modifies table schema and generates a migration folder)
// -OPTIONAL: npx prisma migrate deploy (deploys the changes to the PRODUCTION database, not the local/testing database)
// -npx prisma generate _OR_ npm run prisma:generate (regenerates the prisma client, allowing our ORM to work with the updated postgres migration)

// OPTIONAL: npm run seed (seeds the database, not sure what this does yet, but I know it can be used to clear all the data in there)(DONT run this if
// you don't know what you're doing)

// IMPORTING DATA INTO THE DATABASE: As of 8/23/2021 I don't know how to do this the 'correct way', so this is my workaround:
// Requirements:
// 1) docker container running skidmore-catalog postgres db (must have access to CLI, the terminal interface)
// If the docker container starts in the # directory, navigate into the skidmore-catalog database using:
// psql -d skidmore-catalog -U {username} -W
// enter pass
// 2) pgadmin4, if you want to easily check the changes that were made (must be hooked up to said skidmore-catalog)
// Open the docker container running the skidmore-catalog postgres database. Use the command:
// WARNING: Before you do this, make sure that the csv has the same exact schema as the table does. The column names don't matter, but if they are
// in a different order than each other make sure you define the correct order in the copy command
// BELOW: Copy a csv file into skidmore-catalog postgres db:
// \copy {name of table copying into}({col1_name, col2_name}) from {local file location.csv} delimiter ',' csv header;
// EXAMPLE:
// \copy universe."Tully_Group"(ne
// st, num_members, pcg_name, sg_lon, sg_lat, log_lk,
//  v_mod, dist_mod, sig_v, r2t, sigmap, mass, cf) fr
// om C:\Users\Alex\Tully_groups_full.csv delimiter '
// ,' csv header;

// EXECUTE this ^ command inside of the CLI tool on pgadmin4
// NOTE: Dont forget .csv at the end of the file location like I did many times

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

//from the template
model User {
  id                String         @id @default(cuid())
  //id                Int        @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  email             String         @unique
  password          String
  firstname         String?
  lastname          String?
  resourcesUploaded Resource[] //resources that this repository has uploaded, there can be many (1 repository to many resources uploaded)
  repositories             RepositoriesOnUsers[]
}

model Repository {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  title      String             @unique
  resources  ResourcesOnRepositories[] // edit: many-to-many relations dont need a relation scalar field
  possessors RepositoriesOnUsers[]
}

model RepositoriesOnUsers {
  repository      Repository   @relation(fields: [repositoryTitle], references: [title])
  repositoryTitle String //relation scalar field
  user      User   @relation(fields: [userId], references: [id])
  userId    String //relation scalar field

  //Those 4 fields only define the explicit relation, now we can also add extra relational data

  permissionLevel Int



  @@id([repositoryTitle, userId])
}

model Resource {
  id        String             @id @default(cuid())
  //id        Int      @id @default(autoincrement())
  createdAt DateTime           @default(now())
  createdBy User?              @relation(fields: [creatorId], references: [id]) //person who created this resource -- for logging mainly
  title     String             @unique
  repositories     ResourcesOnRepositories[] //edit: many-to-many relations dont need a relation scalar field
  creatorId String? //relation scalar field (refers to createdBy relation above)
  fields    ResourceField[]
}

model ResourcesOnRepositories {
  resource      Resource @relation(fields: [resourceTitle], references: [title])
  resourceTitle String
  repository          Repository     @relation(fields: [repositoryTitle], references: [title])
  repositoryTitle     String



  @@id([resourceTitle, repositoryTitle])
}

model ResourceField {
  id            String   @id @default(cuid())
  fieldName     String
  dataType      String
  localizedName String //Postgres has some column name restrictions that actually come up semi-frequently
  resource      Resource @relation(fields: [resourceTitle], references: [title])
  resourceTitle String
}



