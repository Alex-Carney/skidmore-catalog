// The schema.prisma defines the way our data is modeled. The exact function of this file is to provide the instructions to the
// 'prisma migrate' command, which will automatically convert all the information in here to SQL and build our database in the way
// we define it here. This means we only need to work with the prisma 'model', instead of raw SQL in postgres. We can completely
// abstract the database out of this app, and only work with prisma as the Object Relational Mapper.
// DON'T ever modify the 'datasource' or 'generator' tags. If you want to update the tables in the database, change the models.
// Any time you change the schema.prisma, you must MIGRATE those changes over to postgres. This requires the following chain of commands:
// (also note that postgres must be running in its docker container for this to work, otherwise the database won't accept any connections)
// If the database is not running in the docker container, use:
// -docker-compose -f docker-compose.db.yml up -d OR npm run docker:db

// COMMAND CHAIN:
// -npx prisma migrate dev _OR_ npm run migrate:dev (applies the new schema to postgres, modifies table schema and generates a migration folder)
// -OPTIONAL: npx prisma migrate deploy (deploys the changes to the PRODUCTION database, not the local/testing database)
// -npx prisma generate _OR_ npm run prisma:generate (regenerates the prisma client, allowing our ORM to work with the updated postgres migration)

// OPTIONAL: npm run seed (seeds the database, not sure what this does yet, but I know it can be used to clear all the data in there)(DONT run this if
// you don't know what you're doing)

// IMPORTING DATA INTO THE DATABASE: As of 8/23/2021 I don't know how to do this the 'correct way', so this is my workaround:
// Requirements:
// 1) docker container running skidmore-catalog postgres db (must have access to CLI, the terminal interface)
// If the docker container starts in the # directory, navigate into the skidmore-catalog database using:
// psql -d skidmore-catalog -U {username} -W
// enter pass
// 2) pgadmin4, if you want to easily check the changes that were made (must be hooked up to said skidmore-catalog)
// Open the docker container running the skidmore-catalog postgres database. Use the command:
// WARNING: Before you do this, make sure that the csv has the same exact schema as the table does. The column names don't matter, but if they are
// in a different order than each other make sure you define the correct order in the copy command
// BELOW: Copy a csv file into skidmore-catalog postgres db:
// \copy {name of table copying into}({col1_name, col2_name}) from {local file location.csv} delimiter ',' csv header;
// EXAMPLE:
// \copy universe."Tully_Group"(ne
// st, num_members, pcg_name, sg_lon, sg_lat, log_lk,
//  v_mod, dist_mod, sig_v, r2t, sigmap, mass, cf) fr
// om C:\Users\Alex\Tully_groups_full.csv delimiter '
// ,' csv header;

// EXECUTE this ^ command inside of the CLI tool on pgadmin4
// NOTE: Dont forget .csv at the end of the file location like I did many times

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

//from the template
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  role      Role
}

//from the template
model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

//defined from the tully_group CSV file, from the tully catalog
model Tully_Group {
  nest        Int    @id @unique
  num_members Int
  pcg_name    String @unique //pcg name of the most massive galaxy in the group 
  sg_lon      Float
  sg_lat      Float
  log_lk      Float
  v_mod       Float
  dist_mod    Float
  sig_v       Float
  r2t         Float
  sigmap      Float
  mass        String
  cf          Float
}

model Tully_Environment {
  orig_src_name        String
  hisrc_name           String
  agcnr                Int     @id @unique
  name                 String?
  radeg_hi             Float?
  decdeg_hi            Float?
  radeg_oc             Float?
  decdeg_oc            Float?
  radeg_use            Float?
  decdeg_use           Float?
  vhelio               Int?
  errv                 Int?
  err_wtot             Int?
  err_wstat            Int?
  w50                  Int?
  w20                  Int?
  hiflux               Float?
  errflux              Float?
  snr                  Float?
  rms                  Float?
  dist                 Float?
  log_msun             Float?
  hicode               Int?
  phot_code            String?
  agc                  Int?
  objid                Float?
  parentid             Float?
  spec_objid           Float?
  ra                   Float?
  dec                  Float?
  model_mag_u          Float?
  model_mag_g          Float?
  model_mag_r          Float?
  model_mag_i          Float?
  model_mag_z          Float?
  model_mag_err_u      Float?
  model_mag_err_g      Float?
  model_mag_err_r      Float?
  model_mag_err_i      Float?
  model_mag_err_z      Float?
  c_model_mag_u        Float?
  c_model_mag_g        Float?
  c_model_mag_r        Float?
  c_model_mag_i        Float?
  c_model_mag_z        Float?
  c_model_mag_err_u    Float?
  c_model_mag_err_g    Float?
  c_model_mag_err_r    Float?
  c_model_mag_err_i    Float?
  c_model_mag_err_z    Float?
  petro_mag_u          Float?
  petro_mag_g          Float?
  petro_mag_r          Float?
  petro_mag_i          Float?
  petro_mag_z          Float?
  petro_mag_err_u      Float?
  petro_mag_err_g      Float?
  petro_mag_err_r      Float?
  petro_mag_err_i      Float?
  petro_mag_err_z      Float?
  petro_rad_u          Float?
  petro_rad_g          Float?
  petro_rad_r          Float?
  petro_rad_i          Float?
  petro_rad_z          Float?
  petror50_g           Float?
  petror50_r           Float?
  petror50_i           Float?
  petror90_g           Float?
  petror90_r           Float?
  petror90_i           Float?
  extinction_u         Float?
  extinction_g         Float?
  extinction_r         Float?
  extinction_i         Float?
  extinction_z         Float?
  expab_g              Float?
  expab_r              Float?
  expab_i              Float?
  exp_mag_g            Float?
  exp_mag_r            Float?
  exp_mag_i            Float?
  flags_u              Float?
  flags_g              Float?
  flags_r              Float?
  flags_i              Float?
  flags_z              Float?
  flags                Float?
  lnlexp_r             Float?
  lnldev_r             Float?
  type                 Float?
  frac_dev_g           Float?
  frac_dev_r           Float?
  frac_dev_i           Float?
  exp_rad_g            Float?
  exp_rad_r            Float?
  exp_rad_i            Float?
  skydistdeg2          Float?
  skdistarcsec         Float?
  ocfromsdssarcseconds Float?
}

model SDSS_OpticalProperties {
  agc               Int    @id @unique
  sdss_phot_flag    Int
  sdss_objid        String
  ra                Float
  dec               Float
  vhelio            Int
  dist              Float
  sig_dist          Float
  extinction_g      Float?
  extinction_i      Float?
  exp_ab_r          Float?
  exp_ab_r_err      Float?
  c_model_mag_i     Float?
  c_model_mag_err_i Float?

}

// model SDSS_DerivedProperties {
//   agc                   Int    @id @unique
//   gamma_g               Float?
//   gamma_i               Float?
//   abs_mag_i_corr        Float?
//   abs_mag_i_corr_err    Float?
//   gmi_corr              Float?
//   gmi_corr_err          Float?
//   log_mstar_taylor      Float?
//   log_mstar_taylor_err  Float?
//   log_mstar_mcgaugh     Float?
//   log_mstar_mcgaugh_err Float?
//   log_mstar_gswlc       Float?
//   log_mstar_gswlc_err   Float?
//   log_sfr22             Float?
//   log_sfr22_err         Float?
//   log_sfr_nuvir         Float?
//   log_sfr_nuvir_err     Float?
//   log_sfr_gswlc         Float?
//   log_sfr_gswlc_err     Float?
//   log_mh                Float?
//   log_mh_err            Float?

// }

model SDSS_DerivedProperties {
  agc                    Int    @id @unique
  gamma_g                Float?
  gamma_i                Float?
  abs_mag_i_corr         Float?
  abs_mag_i_corr_err     Float?
  gmi_corr               Float?
  gmi_corr_err           Float?
  log_mstar_taylor       Float?
  log_mstar_taylor_err   Float?
  log_mstar_mc_gaugh     Float?
  log_mstar_mc_gaugh_err Float?
  log_mstargswlc         Float?
  log_mstargswlc_err     Float?
  logsfr22               Float?
  logsfr22_err           Float?
  logsfrnuvir            Float?
  logsfrnuvir_err        Float?
  logsfrgswlc            Float?
  logsfrgswlc_err        Float?
  logmh                  Float?
  logmh_err              Float?

}

//no idea what this does
enum Role {
  ADMIN
  USER
}
